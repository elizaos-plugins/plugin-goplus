{"version":3,"sources":["../src/services/GoplusSecurityService.ts","../src/lib/GoPlusManage.ts","../src/templates/index.ts","../src/index.ts"],"sourcesContent":["import { IAgentRuntime, ModelClass, Service, ServiceType, elizaLogger, generateObjectDeprecated, generateText } from \"@elizaos/core\";\nimport { GoPlusManage, GoPlusParamType, GoPlusType } from \"../lib/GoPlusManage\";\nimport { requestPrompt, responsePrompt } from \"../templates\";\n\nexport interface IGoplusSecurityService extends Service {\n    check(text: string): Promise<string>;\n}\n\nexport class GoplusSecurityService extends Service implements IGoplusSecurityService {\n    private apiKey: string;\n    private runtime: IAgentRuntime;\n    getInstance(): GoplusSecurityService {\n        return this;\n    }\n    static get serviceType() {\n        return ServiceType.GOPLUS_SECURITY;\n    }\n\n    initialize(runtime: IAgentRuntime): Promise<void> {\n        this.runtime = runtime;\n        this.apiKey = runtime.getSetting(\"GOPLUS_API_KEY\");\n        return;\n    }\n\n\n    /**\n     * Connect to WebSocket and send a message\n     */\n    async check(text: string): Promise<string> {\n        try {\n            elizaLogger.log(\"check input text\", text);\n            const obj = await generateObjectDeprecated({\n                runtime: this.runtime,\n                context: requestPrompt(text),\n                modelClass: ModelClass.SMALL, // gpt-4o-mini\n            }) as GoPlusParamType;\n\n            elizaLogger.log(\"check generateObjectDeprecated text\", obj);\n\n            const goPlusManage = new GoPlusManage(this.apiKey)\n            let checkResult: any;\n            switch(obj.type) {\n                case GoPlusType.EVMTOKEN_SECURITY_CHECK:\n                    checkResult = await goPlusManage.tokenSecurity(obj.network, obj.token);\n                    break;\n                case GoPlusType.SOLTOKEN_SECURITY_CHECK:\n                    checkResult = await goPlusManage.solanaTokenSecurityUsingGET(obj.token);\n                    break;\n                case GoPlusType.SUITOKEN_SECURITY_CHECK:\n                    checkResult = await goPlusManage.suiTokenSecurityUsingGET(obj.token);\n                    break;\n                case GoPlusType.RUGPULL_SECURITY_CHECK:\n                    checkResult = await goPlusManage.rugpullDetection(obj.network, obj.contract);\n                    break;\n                case GoPlusType.NFT_SECURITY_CHECK:\n                    checkResult = await goPlusManage.nftSecurity(obj.network, obj.token);\n                    break;\n                case GoPlusType.ADRESS_SECURITY_CHECK:\n                    checkResult = await goPlusManage.addressSecurity(obj.wallet);\n                    break;\n                case GoPlusType.APPROVAL_SECURITY_CHECK:\n                    checkResult = await goPlusManage.approvalSecurity(obj.network, obj.contract);\n                    break;\n                case GoPlusType.ACCOUNT_ERC20_SECURITY_CHECK:\n                    checkResult = await goPlusManage.erc20ApprovalSecurity(obj.network, obj.wallet);\n                    break;\n                case GoPlusType.ACCOUNT_ERC721_SECURITY_CHECK:\n                    checkResult = await goPlusManage.erc721ApprovalSecurity(obj.network, obj.wallet);\n                    break;\n                case GoPlusType.ACCOUNT_ERC1155_SECURITY_CHECK:\n                    checkResult = await goPlusManage.erc1155ApprovalSecurity(obj.network, obj.wallet);\n                    break;\n                case GoPlusType.SIGNATURE_SECURITY_CHECK:\n                    checkResult = await goPlusManage.inputDecode(obj.network, obj.data);\n                    break;\n                case GoPlusType.URL_SECURITY_CHECK:\n                    checkResult = await goPlusManage.dappSecurityAndPhishingSite(obj.url);\n                    break;\n                default:\n                    throw new Error(\"type is invaild\")\n            }\n\n            elizaLogger.log(\"checkResult text\", checkResult);\n            const checkResponse = await generateText({\n                runtime: this.runtime,\n                context: responsePrompt(JSON.stringify(checkResult), text),\n                modelClass: ModelClass.SMALL,\n            });\n            elizaLogger.log(\"checkResponse text\", checkResponse);\n            return checkResponse\n        } catch (e) {\n            elizaLogger.error(e);\n            return \"error\";\n        }\n    }\n}\n\nexport default GoplusSecurityService;\n","\n\nexport const GoPlusType = {\n    EVMTOKEN_SECURITY_CHECK: \"EVMTOKEN_SECURITY_CHECK\",\n    SOLTOKEN_SECURITY_CHECK: \"SOLTOKEN_SECURITY_CHECK\",\n    SUITOKEN_SECURITY_CHECK: \"SUITOKEN_SECURITY_CHECK\",\n    RUGPULL_SECURITY_CHECK: \"RUGPULL_SECURITY_CHECK\",\n    NFT_SECURITY_CHECK: \"NFT_SECURITY_CHECK\",\n    ADRESS_SECURITY_CHECK: \"ADRESS_SECURITY_CHECK\",\n    APPROVAL_SECURITY_CHECK: \"APPROVAL_SECURITY_CHECK\",\n    ACCOUNT_ERC20_SECURITY_CHECK: \"ACCOUNT_ERC20_SECURITY_CHECK\",\n    ACCOUNT_ERC721_SECURITY_CHECK: \"ACCOUNT_ERC721_SECURITY_CHECK\",\n    ACCOUNT_ERC1155_SECURITY_CHECK: \"ACCOUNT_ERC1155_SECURITY_CHECK\",\n    SIGNATURE_SECURITY_CHECK: \"SIGNATURE_SECURITY_CHECK\",\n    URL_SECURITY_CHECK: \"URL_SECURITY_CHECK\",\n} as const;\n\nexport type GoPlusTypeType = (typeof GoPlusTypeEnum)[keyof typeof GoPlusType];\n\nexport type GoPlusParamType = {\n    \"type\": GoPlusType,\n    \"network\"?: string,\n    \"token\"?: string,\n    \"contract\"?: string,\n    \"wallet\"?: string,\n    \"url\"?: string,\n    \"data\"?: string,\n}\n\nexport class GoPlusManage {\n    private apiKey: string;\n\n    constructor(apiKey: string = null) {\n        this.apiKey = apiKey;\n    }\n\n    async requestGet(api: string) {\n        const myHeaders = new Headers();\n        if (this.apiKey) {\n            myHeaders.append(\"Authorization\", this.apiKey);\n        }\n        const url = `https://api.gopluslabs.io/${api}`\n        const res = await fetch(url, {\n            method: \"GET\",\n            headers: myHeaders,\n            redirect: \"follow\"\n            })\n\n        return await res.json();\n    }\n\n    async tokenSecurity(chainId: string, address: string) {\n        const api = `api/v1/token_security/${chainId}?contract_addresses=${address}`;\n        return await this.requestGet(api)\n    }\n\n    async rugpullDetection(chainId: string, address: string) {\n        const api = `api/v1/rugpull_detecting/${chainId}?contract_addresses=${address}`;\n        return await this.requestGet(api)\n    }\n\n    async solanaTokenSecurityUsingGET(address: string) {\n        const api = `api/v1/solana/token_security?contract_addresses=${address}`;\n        return await this.requestGet(api)\n    }\n\n    async suiTokenSecurityUsingGET(address: string) {\n        const api = `api/v1/sui/token_security?contract_addresses=${address}`;\n        return await this.requestGet(api)\n    }\n\n    async nftSecurity(chainId: string, address: string) {\n        const api = `api/v1/nft_security/${chainId}?contract_addresses=${address}`;\n        return await this.requestGet(api)\n    }\n\n    async addressSecurity(address: string) {\n        const api = `api/v1/address_security/${address}`;\n        return await this.requestGet(api)\n    }\n\n    async approvalSecurity(chainId: string, contract: string) {\n        const api = `api/v1/approval_security/${chainId}?contract_addresses=${contract}`;\n        return await this.requestGet(api)\n    }\n\n    async erc20ApprovalSecurity(chainId: string, wallet: string) {\n        const api = `api/v2/token_approval_security/${chainId}?addresses=${wallet}`;\n        return await this.requestGet(api)\n    }\n\n    async erc721ApprovalSecurity(chainId: string, wallet: string) {\n        const api = `api/v2/nft721_approval_security/${chainId}?addresses=${wallet}`;\n        return await this.requestGet(api)\n    }\n\n    async erc1155ApprovalSecurity(chainId: string, wallet: string) {\n        const api = `api/v2/nft1155_approval_security/${chainId}?addresses=${wallet}`;\n        return await this.requestGet(api)\n    }\n\n    async inputDecode(chainId: string, data: string) {\n        const body = JSON.stringify({\n            chain_id: chainId,\n            data: data,\n        })\n        const res = await fetch(\"https://api.gopluslabs.io/api/v1/abi/input_decode\", {\n            \"headers\": {\n              \"accept\": \"*/*\",\n              \"accept-language\": \"en,zh-CN;q=0.9,zh;q=0.8\",\n              \"content-type\": \"application/json\"\n            },\n            \"body\": body,\n            \"method\": \"POST\"\n          });\n        return await res.json();\n    }\n\n    async dappSecurityAndPhishingSite(url: string) {\n        const api = `api/v1/dapp_security?url=${url}`;\n        const data1 = await this.requestGet(api)\n\n        const api2 = `api/v1/phishing_site?url=${url}`;\n        const data2 = await this.requestGet(api2)\n        return {\n            data1,\n            data2\n        }\n    }\n}\n","export const requestPrompt = (text:string) => `You are a security action detector for blockchain interactions. Your task is to analyze the user's input text and determine which security checks are needed.\n\nText to analyze:\"\"\"\n${text}\n\"\"\"\nIf the user is not sure which network the sent address belongs to, then according to the following logic initially determine which network the user sends the address belongs to.\n\nDetection Logic:\n1. First check if address starts with \"0x\":\n   - If yes:\n     - If length is 42 -> EVM address\n     - If the address has a non-standard suffix (e.g., \" ::s::S \"), you may treat the base address (without the suffix) as the -> SUI address. , but the full address including the suffix should be placed in the \"token\" field.\n   - If no:\n     - If length is 44 and starts with letter -> Solana address\n\n2. If none of the above patterns match:\n   - -> EVM address\n3. If detection is EVM address:\n   - -> EVM address\n\nNetworks format\nEVM: 0x26e550ac11b26f78a04489d5f20f24e3559f7dd9\nSolana: 9DHe3pycTuymFk4H4bbPoAJ4hQrr2kaLDF6J6aAKpump\nSUI: 0xea65bb5a79ff34ca83e2995f9ff6edd0887b08da9b45bf2e31f930d3efb82866::s::S\n\nAfter determining which action to use, please reply in the json format below the action.\n\nAvailable actions:\n- [EVMTOKEN_SECURITY_CHECK]: For checking ERC20 token contract security\n    Description: Security assessment for tokens on EVM-compatible chains (like Ethereum, BSC), including contract risks, permission configurations, transaction mechanisms\n    Keywords: EVM token, ETH token, BEP20, smart contract, ERC20 security, on-chain token\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"EVMTOKEN_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, Optimism:10, Cronos:25, BSC:56, Gnosis:100, HECO:128, Polygon:137, Fantom:250, KCC:321, zkSync Era:324, ETHW:10001, FON:201022, Arbitrum:42161, Avalanche:43114, Linea Mainnet:59144, Base:8453, Tron:tron, Scroll:534352, opBNB:204, Mantle:5000, ZKFair:42766, Blast:81457, Manta Pacific:169, Berachain Artio Testnet:80085, Merlin:4200, Bitlayer Mainnet:200901, zkLink Nova:810180, X Layer Mainnet:196)\n\"token\": \"\" ,\n}\n\\`\\`\\`\n\n\n- [SOLTOKEN_SECURITY_CHECK]: For checking SPL token contract security\n    Description: Security audit for Solana-based tokens, analyzing program authority settings, account states, transfer restrictions and other security factors\n    Keywords: Solana token, SOL token, SPL token, Solana security, SOL contract\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"SOLTOKEN_SECURITY_CHECK\"\n\"token\": \"\" ,\n}\n\\`\\`\\`\n\n\n- [SUITOKEN_SECURITY_CHECK]: For checking Sui token contract security\n    Description: Security inspection for tokens on SUI blockchain, examining token contract permissions, transaction restrictions, minting mechanisms and other security configurations\n    Keywords: SUI token, SUI coins, MOVE token, SUI contract, SUI security\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"SUITOKEN_SECURITY_CHECK\"\n\"token\": \"\" ,\n}\n\\`\\`\\`\n\n\n- [RUGPULL_SECURITY_CHECK]:\n    Description: Detection of potential rugpull risks in tokens/projects, including contract permissions, liquidity locks, team holdings and other risk factors\n    Keywords: rugpull risk, token security, project reliability, contract risk, liquidity, team wallet\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"RUGPULL_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, BSC:56)\n\"contract\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [NFT_SECURITY_CHECK]\n    Description: Security analysis of NFT project smart contracts, including minting mechanisms, trading restrictions, permission settings\n    Keywords: NFT security, digital collectibles, minting risk, NFT trading, NFT contract\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"NFT_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, Optimism:10, Cronos:25, BSC:56, Gnosis:100, HECO:128, Polygon:137, Fantom:250, KCC:321, zkSync Era:324, FON:201022, Arbitrum:42161, Avalanche:43114, Linea Mainnet:59144, Base:8453, Mantle:5000)\n\"token\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [ADRESS_SECURITY_CHECK]\n    Description: Analysis of specific address security status, detecting known malicious addresses, scam addresses or high-risk addresses\n    Keywords: wallet security, malicious address, scam address, blacklist\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"ADRESS_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, Optimism:10, Cronos:25, BSC:56, Gnosis:100, HECO:128, Polygon:137, Fantom:250, KCC:321, zkSync Era:324, FON:201022, Arbitrum:42161, Avalanche:43114, Linea Mainnet:59144, Tron:tron, Scroll:534352, opBNB:204, Base:8453, Solana:solana)\n\"wallet\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [APPROVAL_SECURITY_CHECK]\n    Description: Examination of smart contract approval settings, evaluating risk levels of third-party authorizations\n    Keywords: approval check, contract authorization, spending approval, approval risk\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"APPROVAL_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, BSC: 56, OKC: 66, Heco: 128, Polygon: 137, Fantom:250, Arbitrum: 42161, Avalanche: 43114)\n\"contract\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [ACCOUNT_ERC20_SECURITY_CHECK]\n    Description: Security assessment of account-related ERC20 token transactions and holdings\n    Keywords: ERC20, token account, token security, account detection\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"ACCOUNT_ERC20_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, Optimism:10, Cronos:25, BSC:56, Gnosis:100, HECO:128, Polygon:137, Fantom:250, KCC:321, zkSync Era:324, FON:201022, Arbitrum:42161, Avalanche:43114, Linea Mainnet:59144, Base:8453, Mantle:5000)\n\"wallet\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [ACCOUNT_ERC721_SECURITY_CHECK]\n    Description: Security analysis of account's ERC721 NFT assets\n    Keywords: ERC721, NFT account, NFT assets, collectibles security\n    Respond with a JSON markdown block containing only the extracted values:\n\\`\\`\\`json\n{\n\"type\": \"ACCOUNT_ERC721_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, Optimism:10, Cronos:25, BSC:56, Gnosis:100, HECO:128, Polygon:137, Fantom:250, KCC:321, zkSync Era:324, FON:201022, Arbitrum:42161, Avalanche:43114, Linea Mainnet:59144, Base:8453, Mantle:5000)\n\"wallet\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [ACCOUNT_ERC1155_SECURITY_CHECK]\n    Description: Security evaluation of account's ERC1155 multi-token standard assets\n    Keywords: ERC1155, multi-token, hybrid assets, account security\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"ACCOUNT_ERC1155_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum:1, Optimism:10, Cronos:25, BSC:56, Gnosis:100, HECO:128, Polygon:137, Fantom:250, KCC:321, zkSync Era:324, FON:201022, Arbitrum:42161, Avalanche:43114, Linea Mainnet:59144, Base:8453, Mantle:5000)\n\"wallet\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [SIGNATURE_SECURITY_CHECK]\n    Description: Verification of signature security, preventing signature fraud risks\n    Keywords: signature verification, message signing, signature risk, signature fraud\n    Respond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n\"type\": \"SIGNATURE_SECURITY_CHECK\"\n\"network\": \"1\", //default: 1 (Ethereum: 1, Cronos:25, BSC: 56, Heco: 128, Polygon: 137, Fantom:250, KCC: 321, Arbitrum: 42161, Avalanche: 43114)\n\"data\": \"\" | null,\n}\n\\`\\`\\`\n\n\n- [URL_SECURITY_CHECK]\n    Description: Detection of known phishing websites, malicious sites or other security risks in URLs\n    Keywords: link detection, phishing website, malicious URL, website security\n    Respond with a JSON markdown block containing only the extracted values:\n\\`\\`\\`json\n{\n\"type\": \"URL_SECURITY_CHECK\"\n\"url\": \"\" | null,\n}\n\\`\\`\\`\n\nExtract the necessary information(All fields present in the json are important information) and choose the appropriate action(s) based on the text. Return the JSON response following the format above.\nimportant: do not response anything except json`\n\n\n\nexport const responsePrompt = (apiresult: string, text:string) => `You are a security action detector for blockchain interactions. Your task is to analyze the security API’s response from GoPlus and summary the API result.\nAPI to analyze:“”\"\n${apiresult}\n“”\"\nuser’s request:“”\n${text}\n“”\nInstructions:\n1. **Identify the Action**: Analyze the API response to determine which specific action it relates to.\n2. **Extract Relevant Information**: From the action and its parameters, extract and highlight the key details.\n3. **Formulate a Clear Response**: Combine the action type, extracted information, and an analysis of the results. Provide a clear, concise response based on the security context. Focus on delivering the most relevant answer without unnecessary detail.\n- Only reply with your conclusion.\n- Do not discuss the safety aspects of the action; just focus on identifying and pointing out any risks.\n- Tailor your response to the user’s request, focusing on their specific query.`","import { Plugin } from \"@elizaos/core\";\nimport GoplusSecurityService from \"./services/GoplusSecurityService\";\n\nexport * from \"./services/GoplusSecurityService\";\n\n\nexport const goplusPlugin: Plugin = {\n  name: \"goplus\",\n  description:\n    \"goplus Plugin for Eliza - Enables on-chain security checks\",\n  actions: [],\n  evaluators: [],\n  providers: [],\n  services: [new GoplusSecurityService()],\n};\n\nexport default goplusPlugin;\n"],"mappings":"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","names":[]}